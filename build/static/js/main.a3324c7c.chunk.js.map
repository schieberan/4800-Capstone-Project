{"version":3,"sources":["aws-exports.js","App.tsx","graphql/mutations.ts","serviceWorker.ts","index.tsx"],"names":["awsmobile","Amplify","configure","awsConfig","initialState","neighs","formData","camera","present","number","status","reducer","state","action","type","payload","withAuthenticator","createNewNeigh","e","a","stopPropagation","neigh","API","graphql","graphqlOperation","input","useReducer","dispatch","handleChange","target","name","value","className","Container","Row","Col","md","Form","Group","controlId","Control","onChange","placeholder","Button","onClick","length","Table","striped","bordered","hover","map","index","key","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.a3324c7c.chunk.js","sourcesContent":["/* eslint-disable */\n// WARNING: DO NOT EDIT. This file is automatically generated by AWS Amplify. It will be overwritten.\n\nconst awsmobile = {\n    \"aws_project_region\": \"us-east-1\",\n    \"aws_cognito_identity_pool_id\": \"us-east-1:787e7655-9efd-48dc-b6d3-198160c01822\",\n    \"aws_cognito_region\": \"us-east-1\",\n    \"aws_user_pools_id\": \"us-east-1_mkntIHP1q\",\n    \"aws_user_pools_web_client_id\": \"aqcnc9t5gs0af3kt91i0k9u6a\",\n    \"oauth\": {},\n    \"aws_appsync_graphqlEndpoint\": \"https://7gcug2ezk5eajd6ldpah6nataq.appsync-api.us-east-1.amazonaws.com/graphql\",\n    \"aws_appsync_region\": \"us-east-1\",\n    \"aws_appsync_authenticationType\": \"API_KEY\",\n    \"aws_appsync_apiKey\": \"da2-mnawcvxbffajjdxodjq4fonfhe\"\n};\n\n\nexport default awsmobile;\n","import Amplify, { API, graphqlOperation } from 'aws-amplify';\r\nimport { withAuthenticator } from 'aws-amplify-react';\r\nimport React, { useEffect, useReducer } from 'react';\r\nimport { Button, Col, Container, Form, Row, Table } from 'react-bootstrap';\r\n\r\nimport './App.css';\r\nimport awsConfig from './aws-exports';\r\nimport { createNeigh } from './graphql/mutations';\r\nimport { listNeighs } from './graphql/queries';\r\nimport { onCreateNeigh } from './graphql/subscriptions';\r\nimport { from } from 'rxjs';\r\n\r\nAmplify.configure(awsConfig);\r\n\r\ntype Neigh = {\r\n  camera: string;\r\n  present: string;\r\n  number: string;\r\n  status: string;\r\n};\r\n\r\ntype AppState = {\r\n  neighs: Neigh[];\r\n  formData: Neigh;\r\n};\r\n\r\ntype Action =\r\n  | {\r\n      type: 'QUERY';\r\n      payload: Neigh[];\r\n    }\r\n  | {\r\n      type: 'SUBSCRIPTION';\r\n      payload: Neigh;\r\n    }\r\n  | {\r\n      type: 'SET_FORM_DATA';\r\n      payload: { [field: string]: string };\r\n    };\r\n\r\ntype SubscriptionEvent<D> = {\r\n  value: {\r\n    data: D;\r\n  };\r\n};\r\n\r\nconst initialState: AppState = {\r\n  neighs: [],\r\n  formData: {\r\n    camera: '',\r\n    present: '',\r\n    number: '',\r\n    status: '',\r\n  },\r\n};\r\nconst reducer = (state: AppState, action: Action) => {\r\n  switch (action.type) {\r\n    case 'QUERY':\r\n      return { ...state, neighs: action.payload };\r\n    case 'SUBSCRIPTION':\r\n      return { ...state, neighs: [...state.neighs, action.payload] };\r\n    case 'SET_FORM_DATA':\r\n      return { ...state, formData: { ...state.formData, ...action.payload } };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nconst App: React.FC = () => {\r\n  const createNewNeigh = async (e: React.SyntheticEvent) => {\r\n    e.stopPropagation();\r\n    const { camera, present, number, status } = state.formData;\r\n    const neigh = {\r\n      camera,\r\n      present,\r\n      number,\r\n      status,\r\n    };\r\n    await API.graphql(graphqlOperation(createNeigh, { input: neigh }));\r\n  };\r\n\r\n  const [state, dispatch] = useReducer(reducer, initialState);\r\n\r\n  //useEffect(() => {\r\n    //getNeighList();\r\n\r\n\r\n    //const subscription = API.graphql(graphqlOperation(onCreateNeigh)).subscribe({\r\n      //next: (eventData: SubscriptionEvent<{ onCreateNeigh: Neigh }>) => {\r\n        //const payload = eventData.value.data.onCreateNeigh;\r\n        //dispatch({ type: 'SUBSCRIPTION', payload });\r\n      //},\r\n    //});\r\n\r\n    //return () => subscription.unsubscribe();\r\n  //}, []);\r\n\r\n  //const getNeighList = async () => {\r\n    //const neighs = await API.graphql(graphqlOperation(listNeighs));\r\n    //dispatch({\r\n      //type: 'QUERY',\r\n      //payload: neighs.data.listNeighs.items,\r\n    //});\r\n  //};\r\n\r\n  const handleChange = (e: React.ChangeEvent<HTMLInputElement>) =>\r\n    dispatch({\r\n      type: 'SET_FORM_DATA',\r\n      payload: { [e.target.name]: e.target.value },\r\n    });\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <Container>\r\n        <Row className=\"mt-3\">\r\n          <Col md={4}>\r\n            <Form>\r\n              <Form.Group controlId=\"formDataCamera\">\r\n                <Form.Control onChange={handleChange} type=\"text\" name=\"camera\" placeholder=\"Camera\" />\r\n              </Form.Group>\r\n              <Form.Group controlId=\"formDataPresent\">\r\n                <Form.Control onChange={handleChange} type=\"text\" name=\"present\" placeholder=\"Present\" />\r\n              </Form.Group>\r\n              <Form.Group controlId=\"formDataNumber\">\r\n                <Form.Control onChange={handleChange} type=\"text\" name=\"number\" placeholder=\"Number\" />\r\n              </Form.Group>\r\n              <Form.Group controlId=\"formDataStatus\">\r\n                <Form.Control onChange={handleChange} type=\"text\" name=\"status\" placeholder=\"Status\" />\r\n              </Form.Group>\r\n              <Button onClick={createNewNeigh} className=\"float-left\">\r\n                Add New Stall\r\n              </Button>\r\n            </Form>\r\n          </Col>\r\n        </Row>\r\n\r\n        {state.neighs.length ? (\r\n          <Row className=\"my-3\">\r\n            <Col>\r\n              <Table striped bordered hover>\r\n                <thead>\r\n                  <tr>\r\n                    <th>#</th>\r\n                    <th>Camera</th>\r\n                    <th>Present?</th>\r\n                    <th>Number of Horses</th>\r\n                    <th>Status</th>\r\n                  </tr>\r\n                </thead>\r\n                <tbody>\r\n                  {state.neighs.map((neigh, index) => (\r\n                    <tr key={`neigh-${index}`}>\r\n                      <td>{index + 1}</td>\r\n                      <td>{neigh.camera}</td>\r\n                      <td>{neigh.number}</td>\r\n                      <td>{neigh.status}</td>\r\n                    </tr>\r\n                  ))}\r\n                </tbody>\r\n              </Table>\r\n            </Col>\r\n          </Row>\r\n        ) : null}\r\n      </Container>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default withAuthenticator(App);\r\n","/* tslint:disable */\n/* eslint-disable */\n// this is an auto generated file. This will be overwritten\n\nexport const createNeigh = /* GraphQL */ `\n  mutation CreateNeigh(\n    $input: CreateNeighInput!\n    $condition: ModelNeighConditionInput\n  ) {\n    createNeigh(input: $input, condition: $condition) {\n      id\n      camera\n      present\n      number\n      status\n      createdAt\n      updatedAt\n    }\n  }\n`;\nexport const updateNeigh = /* GraphQL */ `\n  mutation UpdateNeigh(\n    $input: UpdateNeighInput!\n    $condition: ModelNeighConditionInput\n  ) {\n    updateNeigh(input: $input, condition: $condition) {\n      id\n      camera\n      present\n      number\n      status\n      createdAt\n      updatedAt\n    }\n  }\n`;\nexport const deleteNeigh = /* GraphQL */ `\n  mutation DeleteNeigh(\n    $input: DeleteNeighInput!\n    $condition: ModelNeighConditionInput\n  ) {\n    deleteNeigh(input: $input, condition: $condition) {\n      id\n      camera\n      present\n      number\n      status\n      createdAt\n      updatedAt\n    }\n  }\n`;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}